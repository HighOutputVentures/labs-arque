// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RESPONSE_BODY: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RESPONSE_BODY: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RESPONSE_BODY: [ResponseBody; 3] = [
  ResponseBody::NONE,
  ResponseBody::InsertEvent,
  ResponseBody::ListAggregateEvents,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ResponseBody(pub u8);
#[allow(non_upper_case_globals)]
impl ResponseBody {
  pub const NONE: Self = Self(0);
  pub const InsertEvent: Self = Self(1);
  pub const ListAggregateEvents: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::InsertEvent,
    Self::ListAggregateEvents,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::InsertEvent => Some("InsertEvent"),
      Self::ListAggregateEvents => Some("ListAggregateEvents"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ResponseBody {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ResponseBody {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for ResponseBody {
    type Output = ResponseBody;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for ResponseBody {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ResponseBody {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ResponseBody {}
pub struct ResponseBodyUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RESPONSE_STATUS: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RESPONSE_STATUS: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RESPONSE_STATUS: [ResponseStatus; 3] = [
  ResponseStatus::Ok,
  ResponseStatus::InvalidAggregateVersionError,
  ResponseStatus::UnknownError,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ResponseStatus(pub i8);
#[allow(non_upper_case_globals)]
impl ResponseStatus {
  pub const Ok: Self = Self(0);
  pub const InvalidAggregateVersionError: Self = Self(1);
  pub const UnknownError: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Ok,
    Self::InvalidAggregateVersionError,
    Self::UnknownError,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Ok => Some("Ok"),
      Self::InvalidAggregateVersionError => Some("InvalidAggregateVersionError"),
      Self::UnknownError => Some("UnknownError"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ResponseStatus {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ResponseStatus {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for ResponseStatus {
    type Output = ResponseStatus;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for ResponseStatus {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ResponseStatus {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ResponseStatus {}
pub enum EventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Event<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Event<'a> {
  type Inner = Event<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Event<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_AGGREGATE_ID: flatbuffers::VOffsetT = 8;
  pub const VT_AGGREGATE_VERSION: flatbuffers::VOffsetT = 10;
  pub const VT_BODY: flatbuffers::VOffsetT = 12;
  pub const VT_META: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Event { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EventArgs<'args>
  ) -> flatbuffers::WIPOffset<Event<'bldr>> {
    let mut builder = EventBuilder::new(_fbb);
    if let Some(x) = args.meta { builder.add_meta(x); }
    if let Some(x) = args.body { builder.add_body(x); }
    builder.add_aggregate_version(args.aggregate_version);
    if let Some(x) = args.aggregate_id { builder.add_aggregate_id(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_type_(args.type_);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_ID, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn type_(&self) -> u16 {
    self._tab.get::<u16>(Event::VT_TYPE_, Some(0)).unwrap()
  }
  #[inline]
  pub fn aggregate_id(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_AGGREGATE_ID, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn aggregate_version(&self) -> u32 {
    self._tab.get::<u32>(Event::VT_AGGREGATE_VERSION, Some(0)).unwrap()
  }
  #[inline]
  pub fn body(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_BODY, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn meta(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_META, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for Event<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("id", Self::VT_ID, false)?
     .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("aggregate_id", Self::VT_AGGREGATE_ID, false)?
     .visit_field::<u32>("aggregate_version", Self::VT_AGGREGATE_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("body", Self::VT_BODY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("meta", Self::VT_META, false)?
     .finish();
    Ok(())
  }
}
pub struct EventArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub type_: u16,
    pub aggregate_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub aggregate_version: u32,
    pub body: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub meta: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for EventArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventArgs {
      id: None,
      type_: 0,
      aggregate_id: None,
      aggregate_version: 0,
      body: None,
      meta: None,
    }
  }
}

pub struct EventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EventBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_ID, id);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: u16) {
    self.fbb_.push_slot::<u16>(Event::VT_TYPE_, type_, 0);
  }
  #[inline]
  pub fn add_aggregate_id(&mut self, aggregate_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_AGGREGATE_ID, aggregate_id);
  }
  #[inline]
  pub fn add_aggregate_version(&mut self, aggregate_version: u32) {
    self.fbb_.push_slot::<u32>(Event::VT_AGGREGATE_VERSION, aggregate_version, 0);
  }
  #[inline]
  pub fn add_body(&mut self, body: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_BODY, body);
  }
  #[inline]
  pub fn add_meta(&mut self, meta: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_META, meta);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Event<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Event<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Event");
      ds.field("id", &self.id());
      ds.field("type_", &self.type_());
      ds.field("aggregate_id", &self.aggregate_id());
      ds.field("aggregate_version", &self.aggregate_version());
      ds.field("body", &self.body());
      ds.field("meta", &self.meta());
      ds.finish()
  }
}
pub enum InsertEventResponseBodyOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InsertEventResponseBody<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InsertEventResponseBody<'a> {
  type Inner = InsertEventResponseBody<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> InsertEventResponseBody<'a> {

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InsertEventResponseBody { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args InsertEventResponseBodyArgs
  ) -> flatbuffers::WIPOffset<InsertEventResponseBody<'bldr>> {
    let mut builder = InsertEventResponseBodyBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for InsertEventResponseBody<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct InsertEventResponseBodyArgs {
}
impl<'a> Default for InsertEventResponseBodyArgs {
  #[inline]
  fn default() -> Self {
    InsertEventResponseBodyArgs {
    }
  }
}

pub struct InsertEventResponseBodyBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InsertEventResponseBodyBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InsertEventResponseBodyBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InsertEventResponseBodyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InsertEventResponseBody<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InsertEventResponseBody<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InsertEventResponseBody");
      ds.finish()
  }
}
pub enum ListAggregateEventsResponseBodyOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ListAggregateEventsResponseBody<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ListAggregateEventsResponseBody<'a> {
  type Inner = ListAggregateEventsResponseBody<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> ListAggregateEventsResponseBody<'a> {
  pub const VT_EVENTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ListAggregateEventsResponseBody { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ListAggregateEventsResponseBodyArgs<'args>
  ) -> flatbuffers::WIPOffset<ListAggregateEventsResponseBody<'bldr>> {
    let mut builder = ListAggregateEventsResponseBodyBuilder::new(_fbb);
    if let Some(x) = args.events { builder.add_events(x); }
    builder.finish()
  }


  #[inline]
  pub fn events(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event>>>>(ListAggregateEventsResponseBody::VT_EVENTS, None)
  }
}

impl flatbuffers::Verifiable for ListAggregateEventsResponseBody<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Event>>>>("events", Self::VT_EVENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ListAggregateEventsResponseBodyArgs<'a> {
    pub events: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event<'a>>>>>,
}
impl<'a> Default for ListAggregateEventsResponseBodyArgs<'a> {
  #[inline]
  fn default() -> Self {
    ListAggregateEventsResponseBodyArgs {
      events: None,
    }
  }
}

pub struct ListAggregateEventsResponseBodyBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ListAggregateEventsResponseBodyBuilder<'a, 'b> {
  #[inline]
  pub fn add_events(&mut self, events: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Event<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListAggregateEventsResponseBody::VT_EVENTS, events);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ListAggregateEventsResponseBodyBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ListAggregateEventsResponseBodyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ListAggregateEventsResponseBody<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ListAggregateEventsResponseBody<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ListAggregateEventsResponseBody");
      ds.field("events", &self.events());
      ds.finish()
  }
}
pub enum ResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Response<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Response<'a> {
  type Inner = Response<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Response<'a> {
  pub const VT_STATUS: flatbuffers::VOffsetT = 4;
  pub const VT_BODY_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_BODY: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Response { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResponseArgs
  ) -> flatbuffers::WIPOffset<Response<'bldr>> {
    let mut builder = ResponseBuilder::new(_fbb);
    if let Some(x) = args.body { builder.add_body(x); }
    builder.add_body_type(args.body_type);
    builder.add_status(args.status);
    builder.finish()
  }


  #[inline]
  pub fn status(&self) -> ResponseStatus {
    self._tab.get::<ResponseStatus>(Response::VT_STATUS, Some(ResponseStatus::Ok)).unwrap()
  }
  #[inline]
  pub fn body_type(&self) -> ResponseBody {
    self._tab.get::<ResponseBody>(Response::VT_BODY_TYPE, Some(ResponseBody::NONE)).unwrap()
  }
  #[inline]
  pub fn body(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Response::VT_BODY, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn body_as_insert_event(&self) -> Option<InsertEventResponseBody<'a>> {
    if self.body_type() == ResponseBody::InsertEvent {
      self.body().map(InsertEventResponseBody::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn body_as_list_aggregate_events(&self) -> Option<ListAggregateEventsResponseBody<'a>> {
    if self.body_type() == ResponseBody::ListAggregateEvents {
      self.body().map(ListAggregateEventsResponseBody::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Response<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ResponseStatus>("status", Self::VT_STATUS, false)?
     .visit_union::<ResponseBody, _>("body_type", Self::VT_BODY_TYPE, "body", Self::VT_BODY, false, |key, v, pos| {
        match key {
          ResponseBody::InsertEvent => v.verify_union_variant::<flatbuffers::ForwardsUOffset<InsertEventResponseBody>>("ResponseBody::InsertEvent", pos),
          ResponseBody::ListAggregateEvents => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ListAggregateEventsResponseBody>>("ResponseBody::ListAggregateEvents", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ResponseArgs {
    pub status: ResponseStatus,
    pub body_type: ResponseBody,
    pub body: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ResponseArgs {
  #[inline]
  fn default() -> Self {
    ResponseArgs {
      status: ResponseStatus::Ok,
      body_type: ResponseBody::NONE,
      body: None,
    }
  }
}

pub struct ResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_status(&mut self, status: ResponseStatus) {
    self.fbb_.push_slot::<ResponseStatus>(Response::VT_STATUS, status, ResponseStatus::Ok);
  }
  #[inline]
  pub fn add_body_type(&mut self, body_type: ResponseBody) {
    self.fbb_.push_slot::<ResponseBody>(Response::VT_BODY_TYPE, body_type, ResponseBody::NONE);
  }
  #[inline]
  pub fn add_body(&mut self, body: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Response::VT_BODY, body);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Response<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Response<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Response");
      ds.field("status", &self.status());
      ds.field("body_type", &self.body_type());
      match self.body_type() {
        ResponseBody::InsertEvent => {
          if let Some(x) = self.body_as_insert_event() {
            ds.field("body", &x)
          } else {
            ds.field("body", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ResponseBody::ListAggregateEvents => {
          if let Some(x) = self.body_as_list_aggregate_events() {
            ds.field("body", &x)
          } else {
            ds.field("body", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("body", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_response<'a>(buf: &'a [u8]) -> Response<'a> {
  unsafe { flatbuffers::root_unchecked::<Response<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_response<'a>(buf: &'a [u8]) -> Response<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Response<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Response`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_response_unchecked`.
pub fn root_as_response(buf: &[u8]) -> Result<Response, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Response>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Response` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_response_unchecked`.
pub fn size_prefixed_root_as_response(buf: &[u8]) -> Result<Response, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Response>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Response` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_response_unchecked`.
pub fn root_as_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Response<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Response<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Response` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_response_unchecked`.
pub fn size_prefixed_root_as_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Response<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Response<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Response and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Response`.
pub unsafe fn root_as_response_unchecked(buf: &[u8]) -> Response {
  flatbuffers::root_unchecked::<Response>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Response and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Response`.
pub unsafe fn size_prefixed_root_as_response_unchecked(buf: &[u8]) -> Response {
  flatbuffers::size_prefixed_root_unchecked::<Response>(buf)
}
#[inline]
pub fn finish_response_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Response<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_response_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Response<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
