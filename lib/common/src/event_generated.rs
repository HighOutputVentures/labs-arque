// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum EventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Event<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Event<'a> {
  type Inner = Event<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Event<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 8;
  pub const VT_VERSION: flatbuffers::VOffsetT = 10;
  pub const VT_AGGREGATE_ID: flatbuffers::VOffsetT = 12;
  pub const VT_AGGREGATE_VERSION: flatbuffers::VOffsetT = 14;
  pub const VT_BODY: flatbuffers::VOffsetT = 16;
  pub const VT_METADATA: flatbuffers::VOffsetT = 18;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Event { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EventArgs<'args>
  ) -> flatbuffers::WIPOffset<Event<'bldr>> {
    let mut builder = EventBuilder::new(_fbb);
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    if let Some(x) = args.body { builder.add_body(x); }
    builder.add_aggregate_version(args.aggregate_version);
    if let Some(x) = args.aggregate_id { builder.add_aggregate_id(x); }
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_type_(args.type_);
    builder.add_version(args.version);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_ID, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn type_(&self) -> u16 {
    self._tab.get::<u16>(Event::VT_TYPE_, Some(0)).unwrap()
  }
  #[inline]
  pub fn timestamp(&self) -> u32 {
    self._tab.get::<u32>(Event::VT_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn version(&self) -> u8 {
    self._tab.get::<u8>(Event::VT_VERSION, Some(0)).unwrap()
  }
  #[inline]
  pub fn aggregate_id(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_AGGREGATE_ID, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn aggregate_version(&self) -> u32 {
    self._tab.get::<u32>(Event::VT_AGGREGATE_VERSION, Some(0)).unwrap()
  }
  #[inline]
  pub fn body(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_BODY, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn metadata(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Event::VT_METADATA, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for Event<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("id", Self::VT_ID, false)?
     .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
     .visit_field::<u32>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<u8>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("aggregate_id", Self::VT_AGGREGATE_ID, false)?
     .visit_field::<u32>("aggregate_version", Self::VT_AGGREGATE_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("body", Self::VT_BODY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("metadata", Self::VT_METADATA, false)?
     .finish();
    Ok(())
  }
}
pub struct EventArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub type_: u16,
    pub timestamp: u32,
    pub version: u8,
    pub aggregate_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub aggregate_version: u32,
    pub body: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub metadata: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for EventArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventArgs {
      id: None,
      type_: 0,
      timestamp: 0,
      version: 0,
      aggregate_id: None,
      aggregate_version: 0,
      body: None,
      metadata: None,
    }
  }
}

pub struct EventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EventBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_ID, id);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: u16) {
    self.fbb_.push_slot::<u16>(Event::VT_TYPE_, type_, 0);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u32) {
    self.fbb_.push_slot::<u32>(Event::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_version(&mut self, version: u8) {
    self.fbb_.push_slot::<u8>(Event::VT_VERSION, version, 0);
  }
  #[inline]
  pub fn add_aggregate_id(&mut self, aggregate_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_AGGREGATE_ID, aggregate_id);
  }
  #[inline]
  pub fn add_aggregate_version(&mut self, aggregate_version: u32) {
    self.fbb_.push_slot::<u32>(Event::VT_AGGREGATE_VERSION, aggregate_version, 0);
  }
  #[inline]
  pub fn add_body(&mut self, body: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_BODY, body);
  }
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_METADATA, metadata);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Event<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Event<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Event");
      ds.field("id", &self.id());
      ds.field("type_", &self.type_());
      ds.field("timestamp", &self.timestamp());
      ds.field("version", &self.version());
      ds.field("aggregate_id", &self.aggregate_id());
      ds.field("aggregate_version", &self.aggregate_version());
      ds.field("body", &self.body());
      ds.field("metadata", &self.metadata());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_event<'a>(buf: &'a [u8]) -> Event<'a> {
  unsafe { flatbuffers::root_unchecked::<Event<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_event<'a>(buf: &'a [u8]) -> Event<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Event<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Event`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_event_unchecked`.
pub fn root_as_event(buf: &[u8]) -> Result<Event, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Event>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Event` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_event_unchecked`.
pub fn size_prefixed_root_as_event(buf: &[u8]) -> Result<Event, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Event>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Event` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_event_unchecked`.
pub fn root_as_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Event<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Event<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Event` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_event_unchecked`.
pub fn size_prefixed_root_as_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Event<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Event<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Event and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Event`.
pub unsafe fn root_as_event_unchecked(buf: &[u8]) -> Event {
  flatbuffers::root_unchecked::<Event>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Event and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Event`.
pub unsafe fn size_prefixed_root_as_event_unchecked(buf: &[u8]) -> Event {
  flatbuffers::size_prefixed_root_unchecked::<Event>(buf)
}
#[inline]
pub fn finish_event_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Event<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_event_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Event<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
